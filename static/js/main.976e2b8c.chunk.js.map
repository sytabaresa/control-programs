{"version":3,"sources":["LGR.js","MinimalTime.js","App.js","serviceWorker.js","index.js"],"names":["LGR","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rlocus","redata","imdata","poles","zeros","step","ystep","tstep","xstep","Gp","Ts","cond","cond1","cond2","ess","ess1","ctype","params","_this2","console","log","axios","get","server_url","then","response","data","result","lgr","_data$step","slicedToArray","setState","e","defineProperty","target","name","value","preventDefault","calculate_system","_this3","react_default","a","createElement","className","onSubmit","onSubmitForm","bind","htmlFor","id","type","onChange","onChangeForm","default","react_plotly_default","map","d","i","x","y","mode","showlegend","concat","marker","symbol","size","layout","title","width","height","xaxis","yaxis","scaleanchor","scaleratio","annotations","Math","sqrt","xref","yref","text","showarrow","arrowhead","ax","ay","font","color","arrowcolor","shapes","x0","y0","x1","y1","fillcolor","line","dash","shape","sizeStep","Component","MinimalTime","App","esm","src_LGR","src_MinimalTime","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.976e2b8c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\nimport axios from 'axios';\n\nimport './App.css';\nimport './plotly.css';\n\n\nclass LGR extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rlocus: {\n        redata: [],\n        imdata: [],\n        poles: [],\n        zeros: [],\n      },\n      step: {\n        ystep: [],\n        tstep: [],\n        xstep: [],\n      },\n      Gp: '0.5(150s+1)',\n      Ts: '20',\n      cond: '1',\n      cond1: '0.5',\n      cond2: '4',\n      ess: '1',\n      ess1: '0',\n      ctype: 'Comp',\n    }\n  }\n\n  calculate_system(params) {\n    console.log(params)\n\n    axios.get(this.props.server_url + '/lgr', {\n      params: params\n    }).then((response) => {\n\n      let data = response.data.result\n      console.log(data)\n\n      let lgr = data[\"rlocus\"][0]\n      let redata = lgr[0]\n      let imdata = lgr[1]\n\n      let zeros = data[\"rlocus\"][1]\n      let poles = data[\"rlocus\"][2]\n\n      let [ystep, tstep, xstep] = data[\"step\"]\n\n\n      console.log(ystep[0])\n      this.setState({\n        rlocus: {\n          redata: redata,\n          imdata: imdata,\n          poles: poles,\n          zeros: zeros,\n        },\n        step: {\n          tstep: tstep,\n          ystep: ystep[0],\n          xstep: xstep,\n        }\n      })\n\n    })\n  }\n\n  onChangeForm(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n\n  onSubmitForm(e) {\n    e.preventDefault();\n    let data = {\n      Gp: this.state.Gp,\n      Ts: this.state.Ts,\n      cond: this.state.cond,\n      cond1: this.state.cond1,\n      cond2: this.state.cond2,\n      ess: this.state.ess,\n      ess1: this.state.ess1,\n      ctype: this.state.ctype,\n    }\n\n    this.calculate_system(data)\n  }\n\n  render() {\n\n    const sizePZ = 10\n    const sizeLGR = 1000\n    const sizeStep = 1000\n    const circleColor = \"rgba(178, 216, 189, 0.1)\"\n    const annotationColor = \"rgba(178, 216, 189, 1)\"\n    const lineColor = \"rgba(178, 216, 189, 1)\"\n\n    return (\n      <div className=\"App\">\n        <form className=\"input\" onSubmit={this.onSubmitForm.bind(this)}>\n          <label htmlFor=\"\">Función de transferencia</label>\n          <input id='Gp' name='Gp' type=\"text\" value={this.state.Gp} onChange={this.onChangeForm.bind(this)} />\n\n          <label htmlFor=\"\">Tiempo de Muestreo</label>\n          <input id='Ts' name='Ts' type=\"text\" value={this.state.Ts} onChange={this.onChangeForm.bind(this)} />\n\n          <label htmlFor=\"\">Condiciones de Diseño</label>\n          <select id='id' name=\"cond\" value={this.state.cond} onChange={this.onChangeForm.bind(this)}>\n            <option value='1'>\\zeta y wn</option>\n            <option value='2'>\\zeta y n</option>\n            <option value='3'>ts y Mp</option>\n            <option value='4'>ts y \\zeta</option>\n            <option value='5'>ts y n</option>\n            <option value='6'>n y Mp</option>\n          </select>\n          <input id=\"cond1\" name='cond1' type=\"text\" value={this.state.cond1} onChange={this.onChangeForm.bind(this)} />\n          <input id=\"cond2\" name='cond2' type=\"text\" value={this.state.cond2} onChange={this.onChangeForm.bind(this)} />\n\n          <label htmlFor=\"\">Error en estado estacionario</label>\n          <select name=\"ess\" id=\"ess\" value={this.state.ess} onChange={this.onChangeForm.bind(this)} >\n            <option value='1' default>sin condición</option>\n            <option value='2'>ep constante</option>\n            <option value='3'>ep = 0</option>\n            <option value='4'>ep = 0, kv constante</option>\n            <option value='5'>ev = 0</option>\n            <option value='6'>ev = 0, ka constante</option>\n            <option value='7'>ea  = 0</option>\n          </select>\n          <input id=\"ess1\" name='ess1' type=\"text\" value={this.state.ess1} onChange={this.onChangeForm.bind(this)} />\n\n          <label htmlFor=\"\">Tipo de controlador</label>\n          <select id=\"ctype\" name=\"ctype\" value={this.state.ctype} onChange={this.onChangeForm.bind(this)}>\n            <option value='PD'>PD</option>\n            <option value='PID'>PID</option>\n            <option value='PI'>PI</option>\n            <option value='Comp' default>Compensador</option>\n          </select>\n\n          <label htmlFor=\"\">Gráficas</label>\n          <button id=\"calc\" type='submit' >Calcular</button>\n        </form>\n        <div className=\"graphs\">\n          <Plot\n            id='LGR'\n            data={\n              this.state.rlocus.redata.map((d, i) => (\n                {\n                  x: this.state.rlocus.redata[i],\n                  y: this.state.rlocus.imdata[i],\n                  type: 'scatter',\n                  mode: 'lines',\n                  showlegend: false,\n                })\n              ).concat([\n                {\n                  x: this.state.rlocus.zeros[0],\n                  y: this.state.rlocus.zeros[1],\n                  type: 'scatter',\n                  mode: 'markers',\n                  name: \"zeros\",\n                  marker: {\n                    symbol: \"circle-open\",\n                    size: sizePZ,\n                  }\n                },\n                {\n                  x: this.state.rlocus.poles[0],\n                  y: this.state.rlocus.poles[1],\n                  type: 'scatter',\n                  mode: 'markers',\n                  name: \"polos\",\n                  marker: {\n                    symbol: \"x-thin-open\",\n                    size: sizePZ,\n                  }\n                }\n              ])\n\n            }\n            layout={{\n              title: 'Lugar Geométrico de las Raices',\n              width: sizeLGR,\n              height: sizeLGR,\n              xaxis: {\n                title: 'real',\n              },\n              yaxis: {\n                title: 'imaginario',\n                scaleanchor: \"x\",\n                scaleratio: 1,\n              },\n              annotations: [\n                {\n                  x: 1 / Math.sqrt(2),\n                  y: 1 / Math.sqrt(2),\n                  xref: 'x',\n                  yref: 'y',\n                  text: 'estabilidad',\n                  showarrow: true,\n                  arrowhead: 0,\n                  ax: 40,\n                  ay: -40,\n                  font: {\n                    color: annotationColor,\n                    // size: 12\n                  },\n                  arrowcolor: annotationColor,\n                }\n              ],\n              shapes: [\n                {\n                  type: 'circle',\n                  xref: 'x',\n                  yref: 'y',\n                  x0: -1,\n                  y0: 1,\n                  x1: 1,\n                  y1: -1,\n                  fillcolor: circleColor,\n                  line: {\n                    color: lineColor,\n                    dash: 'dot',\n                  }\n                },\n              ]\n            }}\n          />\n          <option value=\"\"></option>\n          <Plot\n            id='respuesta'\n            data={[\n              {\n                x: this.state.step.tstep,\n                y: this.state.step.ystep,\n                type: 'scatter',\n                mode: 'lines',\n                name: 'respuesta',\n                line: { shape: 'hv' },\n              },\n              // {\n              //   x: this.state.step.tstep,\n              //   y:  [1],\n              //   type: 'scatter',\n              //   mode: 'lines',\n              //   name: 'entrada',\n              // },\n              // {\n              //   x: this.state.step.tstep,\n              //   y: this.state.step.xstep[0],\n              //   type: 'scatter',\n              //   name: 'entrada'\n              // },\n              // {\n              //   x: this.state.step.tstep,\n              //   y: this.state.step.xstep[1],\n              //   type: 'scatter',\n              //   name: 'entrada'\n              // },\n            ]}\n            layout={{\n              title: 'Respuesta en el tiempo del sistema con controlador',\n              width: sizeStep,\n              height: sizeStep * .6,\n              xaxis: {\n                title: 'tiempo (s)'\n              },\n              yaxis: {\n                title: 'voltaje (V)'\n              }\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LGR;\n","import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\n\n\nclass MinimalTime extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      Gp: \"\",\n      Ts: 0,\n      step: {\n        tstep: [],\n        ystep: [],\n      }\n    }\n  }\n\n  onChangeForm(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n\n  onSubmitForm(e) {\n    e.preventDefault();\n    let data = {\n      Gp: this.state.Gp,\n      Ts: this.state.Ts,\n      cond: this.state.cond,\n      cond1: this.state.cond1,\n      cond2: this.state.cond2,\n      ess: this.state.ess,\n      ess1: this.state.ess1,\n      ctype: this.state.ctype,\n    }\n\n    this.calculate_system(data)\n  }\n\n  render() {\n\n    const sizeStep = 1000\n\n    return (\n      <div className=\"App\">\n        <form className=\"input\" onSubmit={this.onSubmitForm.bind(this)}>\n          <label htmlFor=\"\">Función de transferencia</label>\n          <input id='Gp' name='Gp' type=\"text\" value={this.state.Gp} onChange={this.onChangeForm.bind(this)} />\n\n          <label htmlFor=\"\">Tiempo de Muestreo</label>\n          <input id='Ts' name='Ts' type=\"text\" value={this.state.Ts} onChange={this.onChangeForm.bind(this)} />\n          <label htmlFor=\"\">Gráficas</label>\n          <button id=\"calc\" type='submit' >Calcular</button>\n        </form>\n        <div className=\"graphs\">\n          <Plot\n            id='respuesta'\n            data={[\n              {\n                x: this.state.step.tstep,\n                y: this.state.step.ystep,\n                type: 'scatter',\n                mode: 'lines',\n                name: 'respuesta',\n                line: { shape: 'hv' },\n              },\n              // {\n              //   x: this.state.step.tstep,\n              //   y:  [1],\n              //   type: 'scatter',\n              //   mode: 'lines',\n              //   name: 'entrada',\n              // },\n              // {\n              //   x: this.state.step.tstep,\n              //   y: this.state.step.xstep[0],\n              //   type: 'scatter',\n              //   name: 'entrada'\n              // },\n              // {\n              //   x: this.state.step.tstep,\n              //   y: this.state.step.xstep[1],\n              //   type: 'scatter',\n              //   name: 'entrada'\n              // },\n            ]}\n            layout={{\n              title: 'Respuesta en el tiempo del sistema con controlador',\n              width: sizeStep,\n              height: sizeStep * .6,\n              xaxis: {\n                title: 'tiempo (s)'\n              },\n              yaxis: {\n                title: 'voltaje (V)'\n              }\n            }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MinimalTime;","import React, { Component } from 'react';\n\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport \"react-tabs/style/react-tabs.css\";\n\nimport LGR from './LGR';\nimport MinimalTime from './MinimalTime';\n\n//const server_url = 'http://control.tabares.me';\nconst server_url = 'http://localhost:8000';\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <Tabs>\n        <TabList>\n          <Tab>Diseño por LGR</Tab>\n          <Tab>Tiempo Mínimo</Tab>\n          <Tab>Diseño por frecuencia</Tab>\n        </TabList>\n\n        <TabPanel>\n          <LGR server_url={server_url}></LGR>\n        </TabPanel>\n        <TabPanel>\n          <MinimalTime server_url={server_url}/>\n        </TabPanel>\n        <TabPanel>\n          Construyendo\n        </TabPanel>\n      </Tabs>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}